{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\barraud\\\\Desktop\\\\WhiteHatJR\\\\barter-app-stage-8\\\\components\\\\SwipeableFlatlist.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { ListItem, Icon } from 'react-native-elements';\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport db from \"../config\";\n\nvar SwipeableFlatlist = function (_React$Component) {\n  _inherits(SwipeableFlatlist, _React$Component);\n\n  var _super = _createSuper(SwipeableFlatlist);\n\n  function SwipeableFlatlist(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeableFlatlist);\n\n    _this = _super.call(this, props);\n\n    _this.updateMarkAsRead = function (notification) {\n      db.collection(\"all_notifications\").doc(notification.doc_id).update({\n        \"notification_status\": \"read\"\n      });\n    };\n\n    _this.onSwipeChangeValue = function (swipeData) {\n      var allNotifications = _this.state.allNotifications;\n      var key = swipeData.key,\n          value = swipeData.value;\n\n      if (value < -Dimensions.get('window').width) {\n        var newData = _toConsumableArray(allNotifications);\n\n        var prevIndex = allNotifications.findIndex(function (item) {\n          return item.key === key;\n        });\n\n        _this.updateMarkAsread(allNotifications[prevIndex]);\n\n        newData.splice(prevIndex, 1);\n\n        _this.setState({\n          allNotifications: newData\n        });\n      }\n\n      ;\n    };\n\n    _this.renderItem = function (data) {\n      return React.createElement(ListItem, {\n        title: data.item.item_name,\n        titleStyle: {\n          color: 'black',\n          fontWeight: 'bold'\n        },\n        subtitle: data.item.message,\n        bottomDivider: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      });\n    };\n\n    _this.renderHiddenItem = function () {\n      return React.createElement(View, {\n        style: styles.rowBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: [styles.backRightBtn, styles.backRightBtnRight],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.backTextWhite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }\n      })));\n    };\n\n    _this.state = {\n      allNotifications: _this.props.allNotifications\n    };\n    return _this;\n  }\n\n  _createClass(SwipeableFlatlist, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }\n      }, React.createElement(SwipeListView, {\n        disableRightSwipe: true,\n        data: this.state.allNotifications,\n        renderItem: this.renderItem,\n        renderHiddenItem: this.renderHiddenItem,\n        rightOpenValue: -Dimensions.get('window').width,\n        previewRowKey: '0',\n        previewOpenValue: -40,\n        previewOpenDelay: 3000,\n        onSwipeValueChange: this.onSwipeValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return SwipeableFlatlist;\n}(React.Component);\n\nexport { SwipeableFlatlist as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    flex: 1\n  },\n  backTextWhite: {\n    color: '#FFF',\n    fontWeight: 'bold',\n    fontSize: 15\n  },\n  rowBack: {\n    alignItems: 'center',\n    backgroundColor: '#29b6f6',\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingLeft: 15\n  },\n  backRightBtn: {\n    alignItems: 'center',\n    bottom: 0,\n    justifyContent: 'center',\n    position: 'absolute',\n    top: 0,\n    width: 100\n  },\n  backRightBtnRight: {\n    backgroundColor: '#29b6f6',\n    right: 0\n  }\n});","map":{"version":3,"sources":["C:/Users/barraud/Desktop/WhiteHatJR/barter-app-stage-8/components/SwipeableFlatlist.js"],"names":["React","ListItem","Icon","SwipeListView","db","SwipeableFlatlist","props","updateMarkAsRead","notification","collection","doc","doc_id","update","onSwipeChangeValue","swipeData","allNotifications","state","key","value","Dimensions","get","width","newData","prevIndex","findIndex","item","updateMarkAsread","splice","setState","renderItem","data","item_name","color","fontWeight","message","renderHiddenItem","styles","rowBack","backRightBtn","backRightBtnRight","backTextWhite","container","onSwipeValueChange","Component","StyleSheet","create","backgroundColor","flex","fontSize","alignItems","flexDirection","justifyContent","paddingLeft","bottom","position","top","right"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Dimensions, View, Text} from 'react-native'\r\n\r\nimport { ListItem, Icon } from 'react-native-elements';\r\n\r\nimport { SwipeListView } from 'react-native-swipe-list-view';\r\n\r\nimport db from '../config';\r\n\r\nexport default class SwipeableFlatlist extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          allNotifications : this.props.allNotifications,\r\n        };\r\n      }\r\n\r\n      updateMarkAsRead =(notification)=>{\r\n        db.collection(\"all_notifications\").doc(notification.doc_id).update({\r\n          \"notification_status\" : \"read\"\r\n        })\r\n      }\r\n    \r\n    \r\n      onSwipeChangeValue = swipeData => {\r\n        var allNotifications = this.state.allNotifications\r\n          const {key,value} = swipeData;\r\n    \r\n          if(value < -Dimensions.get('window').width){\r\n            const newData = [...allNotifications];\r\n            const prevIndex = allNotifications.findIndex(item => item.key === key);\r\n            this.updateMarkAsread(allNotifications[prevIndex]);\r\n            newData.splice(prevIndex, 1);\r\n            this.setState({allNotifications : newData})\r\n        };\r\n    };\r\n    renderItem = data => (\r\n  \r\n        <ListItem\r\n          title={data.item.item_name}\r\n          titleStyle={{ color: 'black', fontWeight: 'bold' }}\r\n          subtitle={data.item.message}\r\n          bottomDivider\r\n        />\r\n  );\r\n\r\n  renderHiddenItem = () => (\r\n      <View style={styles.rowBack}>\r\n          <View style={[styles.backRightBtn, styles.backRightBtnRight]}>\r\n              <Text style={styles.backTextWhite}></Text>\r\n          </View>\r\n      </View>\r\n  );\r\n\r\n  render(){\r\n    return(\r\n      <View style={styles.container}>\r\n          <SwipeListView\r\n              disableRightSwipe\r\n              data={this.state.allNotifications}\r\n              renderItem={this.renderItem}\r\n              renderHiddenItem={this.renderHiddenItem}\r\n              rightOpenValue={-Dimensions.get('window').width}\r\n              previewRowKey={'0'}\r\n              previewOpenValue={-40}\r\n              previewOpenDelay={3000}\r\n              onSwipeValueChange={this.onSwipeValueChange}\r\n          />\r\n      </View>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        backgroundColor: 'white',\r\n        flex: 1,\r\n    },\r\n    backTextWhite: {\r\n        color: '#FFF',\r\n        fontWeight:'bold',\r\n        fontSize:15\r\n    },\r\n    rowBack: {\r\n        alignItems: 'center',\r\n        backgroundColor: '#29b6f6',\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        paddingLeft: 15,\r\n    },\r\n    backRightBtn: {\r\n        alignItems: 'center',\r\n        bottom: 0,\r\n        justifyContent: 'center',\r\n        position: 'absolute',\r\n        top: 0,\r\n        width: 100,\r\n    },\r\n    backRightBtnRight: {\r\n        backgroundColor: '#29b6f6',\r\n        right: 0,\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}